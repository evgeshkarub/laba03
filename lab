#include <algorithm>
#include <iostream>
#include <random>
#include <string>
template<class T>
std::vector<T> generate_random_vector(std::size_t num, T min = -10, T max = 10)
{
    std::random_device rd;
    std::mt1937 e2(rd());
    std::uniform_real_distribution<> dist(min, max);
    auto lambda = [&e2, &dist]() -> T { return dist(e2); };
    std::vector<T> result(num);
    std::generate_n(result.begin(), num, lambda);
    return result;
}
int main()
{
    std::vector<float> v1 = generate_random_vector<float>(10, -100, 50);
    for (int j = 0; j < v1.size(); ++j)
    {
        std::cout << v1[j] << " ";
    }
    std::cout << std::endl;
    //////////////////// 1
    std::cout << "all elements are multiplied by 2:" << std::endl;
    for (int j = 0; j < v1.size(); ++j)
    {
        v1[j] *= 2;
        std::cout << v1[j] << " ";
    }
    std::cout << std::endl;
    //
    std::cout << " enter subtraction number " << std::endl;
    double subNumber = 0;
    std::cin >> subNumber;
    std::cout << "all elements are reduced by " << subNumber << std::endl;
    for (int j = 0; j < v1.size(); ++j)
    {
        v1[j] -= subNumber;
        std::cout << v1[j] << " ";
    }
    std::cout << std::endl;
    //
    std::cout << "all elements are devided by " << v1[0] << std::endl;
    for (int j = 0; j < v1.size(); ++j)
    {
        v1[j] /= v1[0];
        std::cout << v1[j] << " ";
    }
    std::cout << std::endl;
    /////////////////// 2
    double sumElems = 0;
    std::cout << "the sum of all elements:" << std::endl;
    for (int j = 0; j < v1.size(); ++j)
    {
        sumElems += v1[j];
    }
    std::cout << sumElems << std::endl;
    //
    double sqrSum = 0;
    std::cout << "sum of squares of all elements:" << std::endl;
    for (int j = 0; j < v1.size(); ++j)
    {
        sqrSum += v1[j] * v1[j];
    }
    std::cout << sqrSum << std::endl;
    //
    double sumOfSix = 0;
    std::cout << "sum of the first six elements:" << std::endl;
    for (int j = 0; j < 6; ++j)
    {
        sumOfSix += v1[j];
    }
    std::cout << sumOfSix << std::endl;
    //
    std::cout << "enter k1 and k2 (k1 < k2)" << std::endl;
    int k1 = 0;
    int k2 = 0;
    std::cin >> k1 >> k2;
    while (k1 > k2)
    {
        std::cout << "error, k1 > k2! Enter again" << std::endl;
        std::cin >> k1 >> k2;
    }
    while ((k2 > v1.size()) || (k1 > v1.size()))
    {
        std::cout << "error, k2 or k1 > size of vector! enter k1 and k2 again" << std::endl;
        std::cin >> k1 >> k2;
    }
    double sumKs = 0;
    std::cout << "ambit elements sum:" << std::endl;
    for (int j = k1 -1; j < k2; ++j)
    {
        sumKs += v1[j];
    }
    std::cout << sumKs << std::endl;
    //
    std::cout << "all elements average:" << std::endl;
    double average = 0;
    average = sumElems / v1.size();
    std::cout << average << std::endl;
    //
    std::cout << "enter s1 and s2 (s1 < s2)" << std::endl;
    int s1 = 0;
    int s2 = 0;
    std::cin >> s1 >> s2;
    while (s1 > s2)
    {
        std::cout << "error! enter again" << std::endl;
        std::cin >> s1 >> s2;
    }
    double averamb = 0;
    std::cout << "average of ambit(from s1 to s2):" << std::endl;
    for (int j = s1 - 1; j < s2; ++j)
    {
        averamb += v1[j];
    }
    averamb = averamb / (s2 - s1 + 1);
    std::cout << averamb << std::endl;
    //////////////////// 3
    std::vector<int> v2 = generate_random_vector<int>(20, -100, 50);
    for (int j = 0; j < v2.size(); ++j)
    {
        std::cout << v2[j] << " ";
    }
    std::cout << std::endl;
    int d = 0;
    for (int j = 0; j < 3; ++j)
    {
        d = v2[j];
        v2[j] = v2[17 + j];
        v2[17 + j] = d;
    }
    for (int j = 0; j < v2.size(); ++j)
    {
        std::cout << v2[j] << " ";
    }
    std::cout << std::endl;
    //////////////////// 4
    int flag1 = 1;
    for (int j = 0; j < v2.size(); ++j)
    {
        if ((v2[j] < 0) && flag1)
        {
            v2.erase(v2.begin() + j);
            flag1 = 0;
        }
        std::cout << v2[j] << " ";
    }
    std::cout << std::endl;
    //
    int flag2 = 1;
    for (int j = v2.size() - 1; j >= 0; --j)
    {
        if ((v2[j] % 2 == 0) && flag2)
        {
            v2.erase(v2.begin() + j);
            flag2 = 0;
        }
    }
    for (int j = 0; j < v2.size(); ++j)
    {
        std::cout << v2[j] << " ";
    }
    std::cout << std::endl;
    //////////////////// 5
    std::cout << "enter the name of the city" << std::endl;
    std::string citysName = "0";

    std::cin >> citysName;
    if (citysName.size() % 2 == 0)
    {
        std::cout << "even" << std::endl;
    }
    else
    {
        std::cout << "odd" << std::endl;
    
    //////////////////// 6
    std::cout << "enter two surnames" << std::endl;
    std::string sNameF = "0";
    std::string sNameS = "0";
    std::cin >> sNameF >> sNameS;
    if (sNameF.size() > sNameS.size())
    {
        std::cout << sNameF << " is longer than " << sNameS << std::endl;
    }
    else if (sNameF.size() == sNameS.size())
    {
        std::cout << sNameF << " is same length to " << sNameS << std::endl;
    }
    else
    {
        std::cout << sNameS << " is longer than " << sNameF << std::endl;
    }
    //////////////////// 7
    std::cout << "enter three city names" << std::endl;
    std::string cName1 = "0";
    std::string cName2 = "0";
    std::string cName3 = "0";
    std::cin >> cName1 >> cName2 >> cName3;
    if ((cName1.size() > cName2.size()) && (cName1.size() < cName3.size()))
    {
        std::cout << "the shortest: " << cName2 <<
            ", the longest: " << cName3 << std::endl;
    }
    else if ((cName2.size() > cName1.size()) && (cName2.size() < cName3.size()))
    {
        std::cout << "the shortest: " << cName1 <<
            ", the longest: " << cName3 << std::endl;
    }
    else if ((cName3.size() > cName2.size()) && (cName3.size() < cName1.size()))
    {
        std::cout << "the shortest: " << cName2 <<
            ", the longest: " << cName1 << std::endl;
    }
    else if ((cName1.size() > cName3.size()) && (cName1.size() < cName2.size()))
    {
        std::cout << "the shortest: " << cName3 <<
            ", the longest: " << cName2 << std::endl;
    }
    else if ((cName2.size() > cName3.size()) && (cName2.size() < cName1.size()))
    {
        std::cout << "the shortest: " << cName3 <<
            ", the longest: " << cName1 << std::endl;
    }
    else if ((cName3.size() > cName1.size()) && (cName3.size() < cName2.size()))
    {
        std::cout << "the shortest: " << cName1 <<
            ", the longest: " << cName2 << std::endl;
    }
    ///////////////////// 8
    std::cout << "enter a word" << std::endl;
    std::string word = "0";
    std::cin >> word;
    std::cout << "enter m and n" << std::endl;
    int m = 0;
    int n = 0;
    std::cin >> m >> n;
    while ((n > word.size()) || (m > word.size()) || (m > n))
    {
        std::cout << "error, enter m and n again" << std::endl;
        std::cin >> m >> n;
    }
    for (int j = m - 1; j < n; ++j)
    {
        std::cout << word[j];
    }
    std::cout << std::endl;
    ////////////////////// 9
    std::cout << "enter a word" << std::endl;
    std::string word2 = "0";
    std::cin >> word2;
    int wordSize2 = word2.size();
    for (int j = 0; j < wordSize2; ++j)
    {
        word2.push_back('*');
        word2.replace(0, 0, "*");
    }
    std::cout << word2;
    /////////////////// 10
    std::cout << "enter a word" << std::endl;
    std::string word3 = "0";
    std::cin >> word3;
    double dSymbA = 0;
    for (int j = 0; j < word3.size(); ++j)
    {
        if (word3[j] == 'a')
        {
            ++dSymbA;
        }
    }
    std::cout << (dSymbA * 100) / word3.size() << "%" << std::endl;
    /////////////////// 11
    std::string cann = "can you can a can as a canner can can a can ?";
    std::cout << "enter new word" << std::endl;;
    std::string newWord = "0";
    std::cin >> newWord;
    int nWordSize = newWord.size();
    while (cann.find(" can ") != std::string::npos)
    {
        std::size_t index = cann.find(" can ");
        cann.replace(index + 1, 3, newWord);
    }
    std::cout << cann;
    return 0;
}
